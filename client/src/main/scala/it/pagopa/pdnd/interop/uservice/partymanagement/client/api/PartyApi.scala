/**
 * Party Management Micro Service
 * This service is the party manager
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.partymanagement.client.api

import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.BulkOrganizations
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.BulkPartiesSeed
import java.io.File
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.Organization
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.OrganizationSeed
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.Person
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.PersonSeed
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.Problem
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.Relationship
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.RelationshipSeed
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.Relationships
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.TokenSeed
import it.pagopa.pdnd.interop.uservice.partymanagement.client.model.TokenText
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.partymanagement.client.invoker._
import it.pagopa.pdnd.interop.uservice.partymanagement.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.partymanagement.client.invoker.ApiKeyLocations._

object PartyApi {

  def apply(baseUrl: String = "http://localhost/pdnd-interop-uservice-party-management/}") = new PartyApi(baseUrl)
}

class PartyApi(baseUrl: String) {
  
  /**
   * Activate Relationship by ID
   * 
   * Expected answers:
   *   code 204 :  (Relationship activated)
   *   code 404 : Problem (Relationship not found)
   * 
   * @param relationshipId Relationship ID
   */
  def activatePartyRelationshipById(relationshipId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/relationships/{relationshipId}/activate", "application/json")
      .withPathParam("relationshipId", relationshipId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 : Organization (successful operation)
   *   code 404 : Problem (Organization not found)
   * 
   * @param id Organization ID
   * @param requestBody 
   */
  def addOrganizationAttributes(id: UUID, requestBody: Seq[String]): ApiRequest[Organization] =
    ApiRequest[Organization](ApiMethods.PATCH, baseUrl, "/organizations/{id}/attributes", "application/json")
      .withBody(requestBody)
      .withPathParam("id", id)
      .withSuccessResponse[Organization](200)
      .withErrorResponse[Problem](404)
      

  /**
   * returns a collection of all the parties for the corresponding identifiers.
   * 
   * Expected answers:
   *   code 200 : BulkOrganizations (collection of organizations)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Organizations not found)
   * 
   * @param bulkPartiesSeed 
   */
  def bulkOrganizations(bulkPartiesSeed: BulkPartiesSeed): ApiRequest[BulkOrganizations] =
    ApiRequest[BulkOrganizations](ApiMethods.POST, baseUrl, "/bulk/organizations", "application/json")
      .withBody(bulkPartiesSeed)
      .withSuccessResponse[BulkOrganizations](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 201 :  (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param token The token to consume
   * @param doc 
   */
  def consumeToken(token: String, doc: File): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/tokens/{token}", "multipart/form-data")
      .withFormParam("doc", doc)
      .withPathParam("token", token)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 201 : Organization (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param organizationSeed 
   */
  def createOrganization(organizationSeed: OrganizationSeed): ApiRequest[Organization] =
    ApiRequest[Organization](ApiMethods.POST, baseUrl, "/organizations", "application/json")
      .withBody(organizationSeed)
      .withSuccessResponse[Organization](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 201 : Person (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param personSeed 
   */
  def createPerson(personSeed: PersonSeed): ApiRequest[Person] =
    ApiRequest[Person](ApiMethods.POST, baseUrl, "/persons", "application/json")
      .withBody(personSeed)
      .withSuccessResponse[Person](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 201 : Relationship (Created Relationship)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param relationshipSeed 
   */
  def createRelationship(relationshipSeed: RelationshipSeed): ApiRequest[Relationship] =
    ApiRequest[Relationship](ApiMethods.POST, baseUrl, "/relationships", "application/json")
      .withBody(relationshipSeed)
      .withSuccessResponse[Relationship](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 201 : TokenText (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param tokenSeed 
   */
  def createToken(tokenSeed: TokenSeed): ApiRequest[TokenText] =
    ApiRequest[TokenText](ApiMethods.POST, baseUrl, "/tokens", "application/json")
      .withBody(tokenSeed)
      .withSuccessResponse[TokenText](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Deletes the relationship identified by relationshipId
   * 
   * Expected answers:
   *   code 204 :  (relationship deleted)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Relationship not found)
   * 
   * @param relationshipId The ID of the Relationship to delete
   */
  def deleteRelationshipById(relationshipId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/relationships/{relationshipId}", "application/json")
      .withPathParam("relationshipId", relationshipId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   *   code 404 :  (Organization not found)
   * 
   * @param id The ID of the Organization to check
   */
  def existsOrganizationById(id: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/organizations/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 :  (Person exists)
   *   code 404 :  (Person not found)
   * 
   * @param id The ID of the Person to check
   */
  def existsPersonById(id: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/persons/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](404)
      

  /**
   * returns the identified organization, if any.
   * 
   * Expected answers:
   *   code 200 : Organization (Organization)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Organization not found)
   * 
   * @param id External Organization ID
   */
  def getOrganizationByExternalId(id: String): ApiRequest[Organization] =
    ApiRequest[Organization](ApiMethods.GET, baseUrl, "/organizations/external/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Organization](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * returns the identified organization, if any.
   * 
   * Expected answers:
   *   code 200 : Organization (Organization)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Organization not found)
   * 
   * @param id Organization ID
   */
  def getOrganizationById(id: UUID): ApiRequest[Organization] =
    ApiRequest[Organization](ApiMethods.GET, baseUrl, "/organizations/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Organization](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * returns the attributes of the identified party, if any.
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Party Attributes)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Party not found)
   * 
   * @param id Organization ID
   */
  def getPartyAttributes(id: UUID): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/organizations/{id}/attributes", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Seq[String]](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * returns the identified person, if any.
   * 
   * Expected answers:
   *   code 200 : Person (Person)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Person not found)
   * 
   * @param id Person ID
   */
  def getPersonById(id: UUID): ApiRequest[Person] =
    ApiRequest[Person](ApiMethods.GET, baseUrl, "/persons/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Person](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Return relationship
   * 
   * Expected answers:
   *   code 200 : Relationship (successful operation)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Relationship not found)
   * 
   * @param relationshipId The ID of the Relationship to retrieve
   */
  def getRelationshipById(relationshipId: UUID): ApiRequest[Relationship] =
    ApiRequest[Relationship](ApiMethods.GET, baseUrl, "/relationships/{relationshipId}", "application/json")
      .withPathParam("relationshipId", relationshipId)
      .withSuccessResponse[Relationship](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 : Relationships (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param from 
   * @param to 
   * @param platformRole 
   */
  def getRelationships(from: Option[UUID] = None, to: Option[UUID] = None, platformRole: Option[String] = None): ApiRequest[Relationships] =
    ApiRequest[Relationships](ApiMethods.GET, baseUrl, "/relationships", "application/json")
      .withQueryParam("from", from)
      .withQueryParam("to", to)
      .withQueryParam("platformRole", platformRole)
      .withSuccessResponse[Relationships](200)
      .withErrorResponse[Problem](400)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param token The token to invalidate
   */
  def invalidateToken(token: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/tokens/{token}", "application/json")
      .withPathParam("token", token)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Problem](400)
      

  /**
   * Suspend relationship by ID
   * 
   * Expected answers:
   *   code 204 :  (Relationship suspended)
   *   code 404 : Problem (Relationship not found)
   * 
   * @param relationshipId Relationship ID
   */
  def suspendPartyRelationshipById(relationshipId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/relationships/{relationshipId}/suspend", "application/json")
      .withPathParam("relationshipId", relationshipId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](404)
      

  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   *   code 404 : Problem (Token not found)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * @param token The token to verify
   */
  def verifyToken(token: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/tokens/{token}", "application/json")
      .withPathParam("token", token)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      



}

