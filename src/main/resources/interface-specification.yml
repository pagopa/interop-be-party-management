openapi: 3.0.3
info:
  title: Party Management Micro Service
  description: This service is the party manager
  version: 0.0.1
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: 'https://gateway.interop.pdnd.dev/pdnd-interop-uservice-party-management/0.0.1'
    description: This service is the party manager
tags:
  - name: party
    description: Manipulate party information
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  '/persons/{taxCode}':
    head:
      tags:
        - party
      summary: Verify if a person exists for a given taxCode
      description: Return ok
      operationId: existsPerson
      parameters:
        - name: taxCode
          in: path
          description: The fiscal code of the Person to check
          required: true
          schema:
            description: Il codice fiscale.
            example: RSSMRA75L01H501A
            #pattern: ^(?:(?:[B-DF-HJ-NP-TV-Z]|[AEIOU])[AEIOU][AEIOUX]|[B-DF-HJ-NP-TV-Z]{2}[A-Z]){2}[\dLMNP-V]{2}(?:[A-EHLMPR-T](?:[04LQ][1-9MNP-V]|[1256LMRS][\dLMNP-V])|[DHPS][37PT][0L]|[ACELMRT][37PT][01LM])(?:[A-MZ][1-9MNP-V][\dLMNP-V]{2}|[A-M][0L](?:[1-9MNP-V][\dLMNP-V]|[0L][1-9MNP-V]))[A-Z]$
            type: string
      responses:
        '200':
          description: Person exists
        '404':
          description: Person not found
    get:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Retrieve the person for the given taxCode
      description: Return ok
      operationId: getPerson
      parameters:
        - name: taxCode
          in: path
          description: The fiscal code of the Person to retrieve
          required: true
          schema:
            description: Il codice fiscale.
            example: RSSMRA75L01H501A
            #pattern: ^(?:(?:[B-DF-HJ-NP-TV-Z]|[AEIOU])[AEIOU][AEIOUX]|[B-DF-HJ-NP-TV-Z]{2}[A-Z]){2}[\dLMNP-V]{2}(?:[A-EHLMPR-T](?:[04LQ][1-9MNP-V]|[1256LMRS][\dLMNP-V])|[DHPS][37PT][0L]|[ACELMRT][37PT][01LM])(?:[A-MZ][1-9MNP-V][\dLMNP-V]{2}|[A-M][0L](?:[1-9MNP-V][\dLMNP-V]|[0L][1-9MNP-V]))[A-Z]$
            type: string
      responses:
        '200':
          description: Person exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /persons:
    post:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Create a new person
      description: Return ok
      operationId: createPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonSeed'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /organizations:
    post:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Create an organization
      description: Return ok
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSeed'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /organizations/{organizationId}:
    head:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Verify if an organization exists for a given organizationId
      description: Return ok
      operationId: existsOrganization
      parameters:
        - name: organizationId
          in: path
          description: The ID of the Organization to check
          required: true
          schema:
            description: to be defined
            example: age
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: Organization not found
    get:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Retrieve the organization for the given organizationId
      description: Return ok
      operationId: getOrganization
      parameters:
        - name: organizationId
          in: path
          description: The ID of the Organization to retrieve
          required: true
          schema:
            description: to be defined
            example: age
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /organizations/{organizationId}/attributes:
    patch:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Retrieve the organization attributes for the given organizationId
      description: Return ok
      operationId: addOrganizationAttributes
      parameters:
        - name: organizationId
          in: path
          description: The ID of the Organization to retrieve
          required: true
          schema:
            description: to be defined
            example: age
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /relationships:
    post:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Create a new relationship between a Person and an Organization
      description: Return ok
      operationId: createRelationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '201':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Return a list of relationships
      description: Return ok
      operationId: getRelationships
      parameters:
        - in: query
          name: from
          schema:
            type: string
        - in: query
          name: to
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationships'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /tokens:
    post:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Create a new token
      description: Return ok
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenSeed'
      responses:
        '201':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/TokenText'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /tokens/{token}:
    head:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Retrieve token info
      description: Return ok
      operationId: verifyToken
      parameters:
        - name: token
          in: path
          description: The token to verify
          required: true
          schema:
            description: to be defined
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: Token not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Consume a token
      description: Return ok
      operationId: consumeToken
      parameters:
        - name: token
          in: path
          description: The token to consume
          required: true
          schema:
            description: to be defined
            type: string
      responses:
        '201':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - party
      summary: Invalidate a token
      description: Return ok
      operationId: invalidateToken
      parameters:
        - name: token
          in: path
          description: The token to invalidate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /status:
    get:
      #      security:
      #        - bearerAuth: [ ]
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/party/{id}/attributes':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: UUID of the party
    get:
      summary: Retrieves attributes
      tags:
        - party
      responses:
        '200':
          description: Party Attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Party not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: getPartyAttributes
      description: 'returns the attributes of the identified party, if any.'
  '/party/organization/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: internal platform UUID of the organization
    get:
      summary: Retrieves organization by plaftorm UUID
      tags:
        - party
      responses:
        '200':
          description: Organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Organization not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: getPartyOrganizationByUUID
      description: 'returns the identified organization, if any.'
  '/party/person/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: internal platform UUID of the person
    get:
      summary: Retrieves person by plaftorm UUID
      tags:
        - party
      responses:
        '200':
          description: Person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Person not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: getPartyPersonByUUID
      description: 'returns the identified person, if any.'
components:
  schemas:
    PersonSeed:
      type: object
      properties:
        taxCode:
          description: Il codice fiscale.
          example: RSSMRA75L01H501A
          type: string
        surname:
          type: string
          example: Doe
        name:
          type: string
          example: John
      required:
        - taxCode
        - name
        - surname
      additionalProperties: false
    Person:
      type: object
      properties:
        taxCode:
          description: Il codice fiscale.
          example: RSSMRA75L01H501A
          type: string
        surname:
          type: string
          example: Doe
        name:
          type: string
          example: John
        partyId:
          type: string
          example: 97c0f418-bcb3-48d4-825a-fe8b29ae68e5
      required:
        - taxCode
        - name
        - surname
        - partyId
      additionalProperties: false
    OrganizationSeed:
      type: object
      properties:
        institutionId:
          description: DN
          example: 'aoo=c_f205,o=c_f205,c=it'
          type: string
        description:
          type: string
          example: AGENCY X
        managerName:
          example: Mario
          type: string
        managerSurname:
          example: Mario
          type: string
        digitalAddress:
          example: email@pec.mail.org
          format: email
          type: string
        attributes:
          $ref: '#/components/schemas/Attributes'
      required:
        - institutionId
        - description
        - managerName
        - managerSurname
        - digitalAddress
        - attributes
      additionalProperties: false
    Organization:
      type: object
      properties:
        institutionId:
          description: DN
          example: 'aoo=c_f205,o=c_f205,c=it'
          type: string
        description:
          type: string
          example: AGENCY X
        managerName:
          example: Mario Rossi
          type: string
        managerSurname:
          example: Rossi
          type: string
        digitalAddress:
          example: email@pec.mail.org
          format: email
          type: string
        partyId:
          type: string
          example: 97c0f418-bcb3-48d4-825a-fe8b29ae68e5
        attributes:
          $ref: '#/components/schemas/Attributes'
      required:
        - institutionId
        - description
        - managerName
        - managerSurname
        - digitalAddress
        - partyId
        - attributes
      additionalProperties: false
    Attributes:
      type: array
      items:
        type: string
    Relationship:
      type: object
      properties:
        from:
          type: string
          description: tax code
        to:
          type: string
          description: institution id
        role:
          type: string
          description: represents the generic available role types for the relationship
          enum:
            - Manager
            - Delegate
            - Operator
        platformRole:
          type: string
          description: 'user role in the application context (e.g.: administrator, security user). This MUST belong to the configured set of application specific platform roles'
        status:
          type: string
          enum:
            - Pending
            - Active
            - Inactive
      additionalProperties: false
      required:
        - from
        - to
        - role
        - platformRole
    Relationships:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
      additionalProperties: false
      required:
        - items
    TokenSeed:
      type: object
      properties:
        seed:
          type: string
          example: 97c0f418-bcb3-48d4-825a-fe8b29ae68e5
        relationships:
          $ref: '#/components/schemas/Relationships'
        checksum:
          type: string
      additionalProperties: false
      required:
        - seed
        - relationships
        - checksum
    TokenText:
      properties:
        token:
          type: string
      additionalProperties: false
      required:
        - token
    Problem:
      properties:
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Request took too long to complete.
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description:
            A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          type: string
      additionalProperties: false
      required:
        - status
        - title
#  securitySchemes:
#    bearerAuth:
#      type: http
#      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
#      scheme: bearer
#      bearerFormat: JWTly in the editor.
