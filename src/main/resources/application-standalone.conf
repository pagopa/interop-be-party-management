#include "persistence-inmem"
include "persistence-jdbc"

akka {
  actor.provider = cluster

  actor {
    serializers {
      party-added = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyAddedSerializer"
      party-updated = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyUpdatedSerializer"
      party-deleted = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyDeletedSerializer"
      party-relationship-added = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipAddedSerializer"
      party-relationship-deleted = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipDeletedSerializer"
      party-relationship-rejected = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipRejectedSerializer"
      party-relationship-confirmed = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipConfirmedSerializer"
      party-relationship-suspended = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipSuspendedSerializer"
      party-relationship-activated = "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipActivatedSerializer"
      token-added = "it.pagopa.interop.partymanagement.model.persistence.serializer.TokenAddedSerializer"
      state = "it.pagopa.interop.partymanagement.model.persistence.serializer.StateSerializer"
      attributes-added = "it.pagopa.interop.partymanagement.model.persistence.serializer.AttributesAddedSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyAddedSerializer" = 100000
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyDeletedSerializer" = 100001
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyUpdatedSerializer" = 100002
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipAddedSerializer" = 200000
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipDeletedSerializer" = 200001
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipConfirmedSerializer" = 200002
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipSuspendedSerializer" = 200003
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipActivatedSerializer" = 200004
      "it.pagopa.interop.partymanagement.model.persistence.serializer.PartyRelationshipRejectedSerializer" = 200005
      "it.pagopa.interop.partymanagement.model.persistence.serializer.TokenAddedSerializer" = 300000
      "it.pagopa.interop.partymanagement.model.persistence.serializer.StateSerializer" = 400000
      "it.pagopa.interop.partymanagement.model.persistence.serializer.AttributesAddedSerializer" = 500000
    }
    serialization-bindings {
      "it.pagopa.interop.partymanagement.model.persistence.PartyAdded" = party-added
      "it.pagopa.interop.partymanagement.model.persistence.PartyUpdated" = party-updated
      "it.pagopa.interop.partymanagement.model.persistence.PartyDeleted" = party-deleted
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipAdded" = party-relationship-added
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipConfirmed" = party-relationship-confirmed
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipRejected" = party-relationship-rejected
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipDeleted" = party-relationship-deleted
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipSuspended" = party-relationship-suspended
      "it.pagopa.interop.partymanagement.model.persistence.PartyRelationshipActivated" = party-relationship-activated
      "it.pagopa.interop.partymanagement.model.persistence.TokenAdded" = token-added
      "it.pagopa.interop.partymanagement.model.persistence.State" = state
      "it.pagopa.interop.partymanagement.model.persistence.AttributesAdded" = attributes-added
    }
  }

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://interop-be-party-management@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }
}

akka.management {
  http {
    bind-hostname = 0.0.0.0
    route-providers-read-only = false
  }

  health-checks {
    readiness-checks {
      ready = "it.pagopa.interop.partymanagement.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.interop.partymanagement.server.impl.LiveCheck"
    }
  }
}

party-management {
  idle-timeout = 12 hours
  number-of-events-before-snapshot = 1000
  port = 8088
  jwt {
    audience = ${?ACCEPTED_AUDIENCES}
  }
  storage {
    container = ${STORAGE_CONTAINER}
    contract-path = "parties/docs"
    contract-path = ${?CONTRACT_PATH}
  }
  storage-Local {
    container = "local"
    contract-path = "parties/docs"
  }
  token-validity-hours = ${TOKEN_VALIDITY_HOURS}
}

kafka-manager {
    bootstrap-servers = ${?KAFKA_BROKER}
    security-protocol = "SASL_SSL"
    security-protocol = ${?KAFKA_SECURITY_PROTOCOL}
    sasl-mechanism = "PLAIN"
    sasl-mechanism = ${?KAFKA_SASL_MECHANISM}
    datalake-contracts-topic = ${?KAFKA_CONTRACTS_TOPIC}
    datalake-contracts-sasl-jaas-config = ${?KAFKA_CONTRACTS_SELFCARE_WO_SASL_JAAS_CONFIG}
}

interop-commons {
  storage {
    type = ${STORAGE_TYPE}
    endpoint = ${STORAGE_ENDPOINT}
    application {
      id = ${STORAGE_CREDENTIAL_ID}
      secret = ${STORAGE_CREDENTIAL_SECRET}
    }
  }
  storage-Local {
    type = "File"
    endpoint = "local"
    application {
      id = "local"
      secret = "l0c4l"
    }
  }
  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

