akka {
  loglevel = "INFO"

  actor {
    serializers {
      party-added = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyAddedSerializer"
      party-deleted = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyDeletedSerializer"
      party-relationship-added = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyRelationShipAddedSerializer"
      party-relationship-deleted = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyRelationShipDeletedSerializer"
      token-added = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenAddedSerializer"
      token-consumed = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenConsumedSerializer"
      token-invalidated = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenInvalidatedSerializer"
      state = "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyAddedSerializer" = 100000
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyDeletedSerializer" = 100001
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyRelationShipAddedSerializer" = 200000
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.PartyRelationShipDeletedSerializer" = 200001
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenAddedSerializer" = 300000
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenConsumedSerializer" = 300001
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.TokenInvalidatedSerializer" = 300002
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.serializer.StateSerializer" = 400000
    }
    serialization-bindings {
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.PartyAdded" = party-added
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.PartyDeleted" = party-deleted
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.PartyRelationShipAdded" = party-relationship-added
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.PartyRelationShipDeleted" = party-relationship-deleted
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.TokenAdded" = token-added
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.TokenConsumed" = token-consumed
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.TokenInvalidated" = token-invalidated
      "it.pagopa.pdnd.interop.uservice.partymanagement.model.persistence.State" = state
    }
  }
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = j5ik2o.s3-snapshot-store
  }
}

datastax-java-driver {
  basic {
      contact-points = [ "cluster1-dc1-service.cassandra-operator.svc.cluster.local" ]
      load-balancing-policy.local-datacenter = "dc1"
  }
  advanced {
    reconnect-on-init = true
    auth-provider {
      class = PlainTextAuthProvider
      username = ${CASSANDRA_USER}
      password = ${CASSANDRA_PWD}
    }
  }
}

j5ik2o {
    s3-snapshot-store {
      bucket-name = "pdnd-interop-infra-uservice-snapshots"
      s3-client {
        access-key-id = ${AWS_ACCESS_KEY_ID}
        secret-access-key = ${AWS_SECRET_ACCESS_KEY}
      }
    }
}

akka.management {
  http {
    hostname = "0.0.0.0"
  }
  health-checks {
    readiness-checks {
      ready = "it.pagopa.pdnd.interop.uservice.partymanagement.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.pdnd.interop.uservice.partymanagement.server.impl.LiveCheck"
    }
  }
}

kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
  }
}

kamon.instrumentation.akka.http {
  server {
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    propagation {
      enabled = yes
      channel = default
    }
  }
}

kamon.instrumentation.akka.http {
  server.metrics {
    enabled = yes
  }
}

kamon.instrumentation.akka.http {
  server {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }
}